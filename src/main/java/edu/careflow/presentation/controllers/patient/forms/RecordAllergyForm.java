package edu.careflow.presentation.controllers.patient.forms;

import edu.careflow.repository.dao.PatientDAO;
import edu.careflow.repository.entities.Allergy;
import javafx.animation.FadeTransition;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.fxml.FXML;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.util.Duration;
import org.controlsfx.control.CheckComboBox;

import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;

public class RecordAllergyForm {

    @FXML
    private TextField allergenField;

    @FXML
    private Button cancelBtn;

    @FXML
    private Button closeBtn;

    @FXML
    private TextField noteField;

    @FXML
    private CheckComboBox<String> reactionsCombo;

    @FXML
    private Button saveBtn;

    @FXML
    private ScrollPane scrollPaneAllergy;

    @FXML
    private ToggleGroup severityGroup;

    private int currentPatientId;
    private int appointmentId;
    private final PatientDAO patientDAO = new PatientDAO();

    private static final List<String> AVAILABLE_REACTIONS = Arrays.asList(
        "Rash", "Hives", "Shortness of breath", "Swelling",
        "Anaphylaxis", "Itching", "Nausea", "Vomiting"
    );

    @FXML
    private void initialize() {
        // Initialize reactions combo box
        reactionsCombo.getItems().addAll(AVAILABLE_REACTIONS);

        // Set up close button
        closeBtn.setOnAction(event -> {
            handleClose();
        });

        cancelBtn.setOnAction(event -> {
            handleClose();
        });

        // Set up save button
        saveBtn.setOnAction(event -> handleSave());
    }

    public void handleClose() {
        FadeTransition fadeOut = new FadeTransition(Duration.millis(150), scrollPaneAllergy);
        fadeOut.setFromValue(1.0);
        fadeOut.setToValue(0.0);
        fadeOut.setOnFinished(e -> {
            // Remove the scrollPane from its parent after fade
            if (scrollPaneAllergy.getParent() instanceof VBox parentBox) {
                parentBox.getChildren().remove(scrollPaneAllergy);
            } else if (scrollPaneAllergy.getParent() != null) {
                ((javafx.scene.layout.Pane) scrollPaneAllergy.getParent()).getChildren().remove(scrollPaneAllergy);
            }
            // Set to null to help garbage collection
            scrollPaneAllergy = null;
        });
        fadeOut.play();
    }

    public void initializePatient(int patientId) {
        this.currentPatientId = patientId;
    }

    public void setIds(int patientId, int appointmentId) {
        this.currentPatientId = patientId;
        this.appointmentId = appointmentId;
    }

    private void handleSave() {
        if (!validateForm()) return;

        try {
            String allergen = allergenField.getText();
            String severity = ((RadioButton) severityGroup.getSelectedToggle()).getText();
            String comment = noteField.getText();

            Allergy allergy = new Allergy(
                0, // ID will be generated by DAO
                currentPatientId,
                allergen,
                severity.toLowerCase(),
                comment,
                appointmentId
            );

            // Add selected reactions
            reactionsCombo.getCheckModel().getCheckedItems().forEach(reaction -> {
                allergy.addReaction(reaction);
            });

            patientDAO.addAllergy(allergy);
            showFloatingMessage("Allergy recorded successfully", true);
            handleClose();
        } catch (SQLException e) {
            showFloatingMessage("Error recording allergy: " + e.getMessage(), false);
        }
    }

    private boolean validateForm() {
        String errorMessage = "";

        if (allergenField.getText().trim().isEmpty()) {
            errorMessage += "Please enter an allergen\n";
        }

        if (severityGroup.getSelectedToggle() == null) {
            errorMessage += "Please select a severity level\n";
        }

        if (reactionsCombo.getCheckModel().getCheckedItems().isEmpty()) {
            errorMessage += "Please select at least one reaction\n";
        }

        if (!errorMessage.isEmpty()) {
            showFloatingMessage(errorMessage, false);
            return false;
        }

        return true;
    }

    private void showFloatingMessage(String message, boolean isSuccess) {
        Scene scene = scrollPaneAllergy.getScene();
        if (scene != null) {
            StackPane container = (StackPane) scene.lookup("#stackPaneContainer");
            if (container != null) {
                Label messageLabel = new Label(message);
                messageLabel.getStyleClass().add(isSuccess ? "success-label" : "error-label");
                messageLabel.setStyle(
                    "-fx-background-color: " + (isSuccess ? "#4CAF50" : "#f44336") + ";" +
                    "-fx-text-fill: white;" +
                    "-fx-padding: 10 20;" +
                    "-fx-background-radius: 5;" +
                    "-fx-translate-y: 300;" +
                    "-fx-font-family: 'Gilroy-SemiBold';" +
                    "-fx-font-size: 16px"
                );

                // Add fade-in animation
                FadeTransition fadeIn = new FadeTransition(Duration.millis(300), messageLabel);
                fadeIn.setFromValue(0.0);
                fadeIn.setToValue(1.0);

                container.getChildren().add(messageLabel);
                fadeIn.play();

                // Remove label after 2 seconds
                Timeline timeline = new Timeline(
                    new KeyFrame(Duration.seconds(2), e -> {
                        FadeTransition fadeOut = new FadeTransition(Duration.millis(300), messageLabel);
                        fadeOut.setFromValue(1.0);
                        fadeOut.setToValue(0.0);
                        fadeOut.setOnFinished(event -> container.getChildren().remove(messageLabel));
                        fadeOut.play();
                    })
                );
                timeline.play();
            }
        }
    }

    public void setPatientId(int id) {
        this.currentPatientId = id;
    }
}
