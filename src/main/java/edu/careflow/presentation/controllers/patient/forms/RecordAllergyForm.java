package edu.careflow.presentation.controllers.patient.forms;

import edu.careflow.repository.dao.PatientDAO;
import edu.careflow.repository.entities.Allergy;
import javafx.animation.FadeTransition;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.util.Duration;
import org.controlsfx.control.CheckComboBox;

import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;

public class RecordAllergyForm {

    @FXML
    private TextField allergenField;

    @FXML
    private Button cancelBtn;

    @FXML
    private Button closeBtn;

    @FXML
    private TextField noteField;

    @FXML
    private CheckComboBox<String> reactionsCombo;

    @FXML
    private Button saveBtn;

    @FXML
    private ScrollPane scrollPaneAllergy;

    @FXML
    private ToggleGroup severityGroup;

    private int currentPatientId;
    private final PatientDAO patientDAO = new PatientDAO();

    private static final List<String> AVAILABLE_REACTIONS = Arrays.asList(
        "Rash", "Hives", "Shortness of breath", "Swelling",
        "Anaphylaxis", "Itching", "Nausea", "Vomiting"
    );

    @FXML
    private void initialize() {
        // Initialize reactions combo box
        reactionsCombo.getItems().addAll(AVAILABLE_REACTIONS);

        // Set up close button
        closeBtn.setOnAction(event -> {
            handleClose();
        });

        cancelBtn.setOnAction(event -> {
            handleClose();
        });

        // Set up save button
        saveBtn.setOnAction(event -> handleSave());
    }

    public void handleClose() {
        FadeTransition fadeOut = new FadeTransition(Duration.millis(150), scrollPaneAllergy);
        fadeOut.setFromValue(1.0);
        fadeOut.setToValue(0.0);
        fadeOut.setOnFinished(e -> {
            // Remove the scrollPane from its parent after fade
            if (scrollPaneAllergy.getParent() instanceof VBox parentBox) {
                parentBox.getChildren().remove(scrollPaneAllergy);
            } else if (scrollPaneAllergy.getParent() != null) {
                ((javafx.scene.layout.Pane) scrollPaneAllergy.getParent()).getChildren().remove(scrollPaneAllergy);
            }
            // Set to null to help garbage collection
            scrollPaneAllergy = null;
        });
        fadeOut.play();
    }

    public void initializePatient(int patientId) {
        this.currentPatientId = patientId;
    }

    private void handleSave() {
        if (!validateForm()) {
            return;
        }

        try {
            RadioButton selectedSeverity = (RadioButton) severityGroup.getSelectedToggle();
            Allergy allergy = new Allergy(
                0, // ID will be generated by DB
                currentPatientId,
                allergenField.getText(),
                selectedSeverity.getText(),
                noteField.getText()
            );

            // Add selected reactions
            for (String reaction : reactionsCombo.getCheckModel().getCheckedItems()) {
                allergy.addReaction(reaction);
            }

            patientDAO.addAllergy(allergy);

            // Show success message
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle("Success");
            alert.setHeaderText(null);
            alert.setContentText("Allergy record added successfully!");
            alert.showAndWait();

            // Close the form
            Stage stage = (Stage) saveBtn.getScene().getWindow();
            stage.close();

        } catch (SQLException e) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Error");
            alert.setHeaderText(null);
            alert.setContentText("Failed to save allergy record: " + e.getMessage());
            alert.showAndWait();
        }
    }

    private boolean validateForm() {
        String errorMessage = "";

        if (allergenField.getText().trim().isEmpty()) {
            errorMessage += "Please enter an allergen\n";
        }

        if (severityGroup.getSelectedToggle() == null) {
            errorMessage += "Please select a severity level\n";
        }

        if (reactionsCombo.getCheckModel().getCheckedItems().isEmpty()) {
            errorMessage += "Please select at least one reaction\n";
        }

        if (!errorMessage.isEmpty()) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Validation Error");
            alert.setHeaderText(null);
            alert.setContentText(errorMessage);
            alert.showAndWait();
            return false;
        }

        return true;
    }
}
